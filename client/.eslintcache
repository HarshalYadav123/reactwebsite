[{"D:\\MERN-STACK insta\\client\\src\\index.js":"1","D:\\MERN-STACK insta\\client\\src\\App.js":"2","D:\\MERN-STACK insta\\client\\src\\reportWebVitals.js":"3","D:\\MERN-STACK insta\\client\\src\\components\\Navbar.js":"4","D:\\MERN-STACK insta\\client\\src\\components\\Login.js":"5","D:\\MERN-STACK insta\\client\\src\\components\\Home.js":"6","D:\\MERN-STACK insta\\client\\src\\components\\Profile.js":"7","D:\\MERN-STACK insta\\client\\src\\components\\Signup.js":"8","D:\\MERN-STACK insta\\client\\src\\components\\CreatePost.js":"9","D:\\MERN-STACK insta\\client\\src\\reducers\\userReducer.js":"10","D:\\MERN-STACK insta\\client\\src\\components\\UserProfile.js":"11"},{"size":434,"mtime":1608012081731,"results":"12","hashOfConfig":"13"},{"size":1672,"mtime":1608703065417,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":3473,"mtime":1608829247783,"results":"16","hashOfConfig":"13"},{"size":2674,"mtime":1608131845835,"results":"17","hashOfConfig":"13"},{"size":7607,"mtime":1608707424379,"results":"18","hashOfConfig":"13"},{"size":2086,"mtime":1608729880026,"results":"19","hashOfConfig":"13"},{"size":4094,"mtime":1608733277441,"results":"20","hashOfConfig":"13"},{"size":2967,"mtime":1608121377716,"results":"21","hashOfConfig":"13"},{"size":223,"mtime":1608462483275,"results":"22","hashOfConfig":"13"},{"size":2298,"mtime":1608730068267,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1r37e0q",{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"26"},"D:\\MERN-STACK insta\\client\\src\\index.js",[],["57","58"],"D:\\MERN-STACK insta\\client\\src\\App.js",["59","60"],"import './App.css'\nimport React,{useEffect,createContext,useReducer,useContext} from 'react'\nimport Navbar from './components/Navbar'\nimport {BrowserRouter,Route,Switch,useHistory} from 'react-router-dom'\nimport Home from './components/Home'\nimport Login from './components/Login'\nimport Profile from './components/Profile'\nimport UserProfile from './components/UserProfile'\nimport Signup from './components/Signup'\nimport CreatePost from './components/CreatePost'\nimport {reducer,initialState} from './reducers/userReducer'\n\nexport const userContext = createContext()\n\nconst Routing = ()=>{\n  const history = useHistory()\n  const{state,dispatch}=useContext(userContext)\n  useEffect(()=>{\n    const user = JSON.parse(localStorage.getItem(\"user\"))    // get user and token from local storage\n    //console.log(user)                                      // (id,name,email)\n    if(user){\n      dispatch({type:\"USER\",payload:user})                  // if user close window without logout then remains same state\n    }else{\n      history.push('/login')\n    }\n  },[])\n  return(\n    <Switch>\n    <Route path=\"/signup\" component={Signup}/>\n    <Route path=\"/login\" component={Login}/>\n    <Route exact path=\"/\" component={Home}/>\n    <Route exact path=\"/profile\" component={Profile}/>\n    <Route exact path=\"/profile/:userid\" component={UserProfile}/>\n    <Route path=\"/create\" component={CreatePost}/>\n    </Switch>\n  )\n}\n\nfunction App() {\n  const[state,dispatch]= useReducer(reducer,initialState)\n  return (\n    <userContext.Provider value={{state,dispatch}}>\n  <BrowserRouter>\n   <Navbar/>\n   <Routing/>\n  </BrowserRouter>\n  </userContext.Provider>\n  );\n}\n\nexport default App;\n","D:\\MERN-STACK insta\\client\\src\\reportWebVitals.js",[],["61","62"],"D:\\MERN-STACK insta\\client\\src\\components\\Navbar.js",[],"D:\\MERN-STACK insta\\client\\src\\components\\Login.js",["63"],"import React,{useState,useContext} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from 'materialize-css'\r\nimport {userContext} from '../App'\r\n\r\nconst Login = () => {\r\n    const[email,setEmail] = useState(\"\")\r\n    const[password,setPassword] = useState(\"\")\r\n    const history = useHistory()\r\n    const{state,dispatch}=useContext(userContext)\r\n\r\n    const postData = ()=>{\r\n        //email validation\r\n        if(!/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email))\r\n        {\r\n            M.toast({html:\"invalid email\",classes:\"#c62828 red darken-3\"})\r\n            return\r\n        }\r\n        // send data to signin api and get response and goto home page\r\n        fetch(\"http://localhost:5000/signin\",{\r\n            method:\"post\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({\r\n                password:password,\r\n                email:email\r\n            })\r\n        }).then(res=>res.json())\r\n         .then(data=>{\r\n             console.log(data)\r\n             if(data.error){\r\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n             }\r\n             else{\r\n                 localStorage.setItem(\"jwt\",data.token)\r\n                 localStorage.setItem(\"user\",JSON.stringify(data.user))\r\n                 dispatch({type:\"USER\",payload:data.user})\r\n                 \r\n                 M.toast({html:\"signedin successfully\",classes:\"#2e7d32 green darken-3\"})\r\n                 history.push('/')\r\n             }\r\n         }).catch(err=>{\r\n             console.log(err)\r\n         })\r\n    }\r\n\r\n    return (\r\n        <div className=\"mycard\">\r\n            <div className=\"card auth-card input-field\">\r\n                <h2>Instagram</h2>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"email\"\r\n                    value={email}\r\n                    onChange={(e)=>setEmail(e.target.value)} \r\n                />\r\n                <input \r\n                    type=\"password\"\r\n                    placeholder=\"password\"\r\n                    value={password}\r\n                    onChange={(e)=>setPassword(e.target.value)}\r\n                />\r\n                 <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\" onClick={()=>postData()}>\r\n                 Login\r\n                 </button>\r\n                 <h5>\r\n                 <Link to=\"/signup\">Don't have an account?</Link>\r\n                 </h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","D:\\MERN-STACK insta\\client\\src\\components\\Home.js",["64","65","66","67","68","69"],"import React, { useState, useEffect,useContext } from 'react'\r\nimport {userContext} from '../App'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Home = () => {\r\n    const [data, setData] = useState([])\r\n    const{state,dispatch} = useContext(userContext)\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/allpost', {\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n            .then(res => res.json())                //send json response\r\n            .then(result => {\r\n                console.log(result)\r\n                //console.log(result.posts)        // [_id,title,body,photo,postedBy(id,name)]\r\n                setData(result.posts)               // result->boject   posts->array\r\n            })\r\n    }, [])\r\n\r\n    const likePost = (id) => {\r\n        fetch('http://localhost:5000/like', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({                       // convert javascript object to string(When sending data to a web server the data has to be a string)\r\n                postId: id                                // id = postId\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                const newData = data.map(item => {\r\n                    if (item._id == result._id) {               // if match    \r\n                        return result                           //then return updated record\r\n                    } else {\r\n                        return item                             //else return old record\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const unlikePost = (id) => {\r\n        fetch('http://localhost:5000/unlike', {\r\n            method: \"put\",\r\n            headers: {\r\n                \"Authorization\": \"Bearer \" + localStorage.getItem(\"jwt\"),\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({                       // convert javascript object to string(When sending data to a web server the data has to be a string)\r\n                postId: id\r\n            })\r\n        }).then(res => res.json())\r\n            .then(result => {\r\n                // console.log(result)\r\n                const newData = data.map(item => {\r\n                    if (item._id == result._id) {                   //if existing postId match with this postId then\r\n                        return result                               //return updated record\r\n                    } else {\r\n                        return item                                 //else return old record\r\n                    }\r\n                })\r\n                setData(newData)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    const makeComment = (text,postId)=>{\r\n        fetch(\"http://localhost:5000/comment\",{\r\n            method:\"put\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                text:text,\r\n                postId:postId\r\n            })\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n           console.log(result)\r\n            const newData = data.map(item => {\r\n                if (item._id == result._id) {                   //if existing postId match with this postId then\r\n                    return result                               //return updated record\r\n                } else {\r\n                    return item                                 //else return old record\r\n                }\r\n            })\r\n            setData(newData)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    const deletePost = (postId)=>{\r\n        fetch(`http://localhost:5000/deletepost/${postId}`,{\r\n            method:\"delete\",\r\n            headers:{\r\n                \"Authorization\":\"Bearer \"+localStorage.getItem(\"jwt\")\r\n            }\r\n        }).then(res=>res.json())\r\n        .then(result=>{\r\n            console.log(result)\r\n            const newData=data.filter(item=>{\r\n                return item._id !== result._id                // if existing postId not match with resultant updated Id then return remaining posts(existing items)\r\n            })\r\n            setData(newData)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n\r\n    // const deleteComment=(commentId)=>{\r\n    //     fetch(`http://localhost:5000/deletecomment/${commentId}`,{\r\n    //         method:\"delete\",\r\n    //         headers:{\r\n    //             \"Authorization\":\"Bearer \"+localStorage.getItem(\"jwt\")\r\n    //         }\r\n    //     }).then(res=>res.json())\r\n    //     .then(result=>{\r\n    //         console.log(result)\r\n    //     })\r\n    // }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            {\r\n                data.map(item => {\r\n                    return (\r\n                        <div className=\"card home-card\">\r\n                            <h5><Link to={\"/profile/\"+item.postedBy._id}>{item.postedBy.name}</Link>\r\n                            { item.postedBy._id == state._id \r\n                            && <i className=\"material-icons\" style={{float:\"right\"}} onClick={() => {deletePost(item._id)}}>delete</i>\r\n                            }\r\n                            </h5>\r\n                            <div className=\"card-image\">\r\n                                <img src={item.photo} />\r\n                            </div>\r\n                            <div className=\"card-content\">\r\n                                <i className=\"material-icons\" style={{ color: \"red\" }}>favorite</i>\r\n                                {item.likes.includes(state._id)\r\n                                ?\r\n                                <i className=\"material-icons\" onClick={() => { unlikePost(item._id) }}>thumb_down</i>\r\n                                :\r\n                                <i className=\"material-icons\" onClick={() => { likePost(item._id) }}>thumb_up</i>\r\n                                }\r\n                                <h6>{item.likes.length} likes</h6>\r\n                                <h6>{item.title}</h6>\r\n                                <p>{item.body}</p>\r\n                                {\r\n                                    item.comments.map(record=>{\r\n                                        return(\r\n                                            <h6><span style={{fontWeight:\"500\"}}>{record.postedBy.name} </span>{record.text}\r\n                                            </h6>\r\n                                        )\r\n                                    })\r\n                                   \r\n                                }\r\n                                <form onSubmit={(e)=>{\r\n                                    e.preventDefault()\r\n                                    makeComment(e.target[0].value,item._id)\r\n                                }}>\r\n                                <input type=\"text\" placeholder=\"add comment\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Home","D:\\MERN-STACK insta\\client\\src\\components\\Profile.js",["70","71"],"import React,{useEffect,useState,useContext} from 'react'\r\nimport {userContext} from '../App'\r\n\r\nconst Profile = () => {\r\n    const [mypics,setPics]=useState([])\r\n    const {state,dispatch}=useContext(userContext)\r\n   // console.log(state)                              //(_id,name,email)\r\n    useEffect(() => {\r\n        fetch('http://localhost:5000/mypost',{\r\n            headers:{\r\n                \"Authorization\":\"Bearer \"+localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n           // console.log(result)               // (result is object(mypost) which contains array[id,title,body,photo])\r\n            setPics(result.mypost)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div style={{maxWidth:\"550px\",margin:\"0px auto\"}}>\r\n            <div style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-around\",\r\n                margin: \"18px 0px\",\r\n                borderBottom:\"1px solid grey\"\r\n            }}>\r\n                <div>\r\n                <img style={{ width: \"160px\", height: \"160px\", borderRadius: \"80px\" }}\r\n                    src={state?state.pic:\"loading\"} />\r\n                </div>\r\n                <div>\r\n                     <h4>{state?state.name:\"loading\"}</h4> \r\n                     <h5>{state?state.email:\"loading\"}</h5> \r\n                    <div style={{\r\n                        display:\"flex\",\r\n                        justifyContent:\"space-between\",\r\n                        width:\"108%\"\r\n                        }}>\r\n                        <h6>40 post</h6>\r\n                        <h6>40 followers</h6>\r\n                        <h6>40 followings</h6>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"gallery\">\r\n            {\r\n                mypics.map(item=>{\r\n                    return(\r\n                        <img className=\"item\" src={item.photo} alt={item.title}/>\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Profile\r\n","D:\\MERN-STACK insta\\client\\src\\components\\Signup.js",["72"],"import React, {useState,useEffect} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from 'materialize-css'\r\n\r\nconst Signup = ()=>{\r\n    const[name,setName] = useState(\"\")\r\n    const[password,setPassword] = useState(\"\")\r\n    const[email,setEmail] = useState(\"\")\r\n    const[image,setImage] = useState(\"\")\r\n    const[url,setUrl] = useState(undefined)\r\n    const history = useHistory()\r\n\r\n        useEffect(()=>{\r\n            if(url){                        //when image uploaded then kick this useEfect\r\n                uploadFields()\r\n            }\r\n        },[url])\r\n\r\n    const uploadPic = ()=>{\r\n        const data = new FormData()\r\n        data.append(\"file\",image)\r\n        data.append(\"upload_preset\",\"Insta-clone\")\r\n        data.append(\"cloud_name\",\"harshal\")\r\n        fetch(\"https://api.cloudinary.com/v1_1/harshal/image/upload\",{\r\n            method:\"post\",\r\n            body:data\r\n        })\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            setUrl(data.url)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n    }\r\n    const uploadFields = ()=>{\r\n        //email validation\r\n        if(!/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email))\r\n        {\r\n            M.toast({html:\"invalid email\",classes:\"#c62828 red darken-3\"})\r\n            return\r\n        }\r\n        //send data to signup api and get response and goto login page\r\n        fetch(\"http://localhost:5000/signup\",{                               // fetch method used to fetch resources\r\n            method:\"post\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body:JSON.stringify({\r\n                name:name,\r\n                password:password,\r\n                email:email,\r\n                pic:url\r\n            })\r\n        }).then(res=>res.json())\r\n         .then(data=>{\r\n             if(data.error){\r\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n             }\r\n             else{\r\n                 M.toast({html:data.message,classes:\"#2e7d32 green darken-3\"})\r\n                history.push('/login')\r\n             }\r\n         }).catch(err=>{\r\n             console.log(err)\r\n         })\r\n    }\r\n    const postData = ()=>{\r\n        if(image){\r\n            uploadPic()\r\n        }else{\r\n            uploadFields()\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"mycard\">\r\n            <div className=\"card auth-card input-field\">\r\n                <h2>Instagram</h2>\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"name\"\r\n                    value={name}\r\n                    onChange = {(e)=>setName(e.target.value)}\r\n                />\r\n                <input \r\n                    type=\"text\"\r\n                    placeholder=\"email\"\r\n                    value={email}\r\n                    onChange = {(e)=>setEmail(e.target.value)}\r\n                />\r\n                <input \r\n                    type=\"password\"\r\n                    placeholder=\"password\"\r\n                    value={password}\r\n                    onChange = {(e)=>setPassword(e.target.value)}\r\n                />\r\n                <div className=\"file-field input-field\">\r\n                <div className=\"btn #64b5f6 blue darken-1\">\r\n                    <span>Upload Pic</span>\r\n                    <input type=\"file\" onChange={(e)=>setImage(e.target.files[0])} />\r\n                </div>\r\n                <div className=\"file-path-wrapper\">\r\n                    <input className=\"file-path validate\" type=\"text\" />\r\n                </div>\r\n                </div>\r\n                 <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\" onClick={()=>postData()}>\r\n                 Signup\r\n                 </button>\r\n                 <h5>\r\n                 <Link to=\"/login\">Already have an account?</Link>\r\n                 </h5>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Signup","D:\\MERN-STACK insta\\client\\src\\components\\CreatePost.js",["73"],"import React,{useState,useEffect} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport M from 'materialize-css'\r\n\r\nconst CreatePost = () => {\r\n    const[title,setTitle] = useState(\"\")\r\n    const[body,setBody] = useState(\"\")\r\n    const[image,setImage] = useState(\"\")\r\n    const[url,setUrl] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        if(url){\r\n        //send data to createpost api and goto home page\r\n        fetch(\"http://localhost:5000/createpost\",{\r\n            method:\"post\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\",\r\n                \"Authorization\":\"Bearer \"+localStorage.getItem(\"jwt\")\r\n            },\r\n            body:JSON.stringify({\r\n                title,\r\n                body,\r\n                pic:url\r\n            })\r\n        }).then(res=>res.json())\r\n         .then(data=>{\r\n             console.log(data)\r\n             if(data.error){\r\n                M.toast({html: data.error,classes:\"#c62828 red darken-3\"})\r\n             }\r\n             else{\r\n                 M.toast({html:\"created post successfully\",classes:\"#2e7d32 green darken-3\"})\r\n                history.push('/')\r\n             }\r\n         }).catch(err=>{\r\n             console.log(err)\r\n         })\r\n        }\r\n    },[url])\r\n\r\n    const postDetails = ()=>{\r\n\r\n        // post image to cloudinary \r\n        const data = new FormData()\r\n        data.append(\"file\",image)\r\n        data.append(\"upload_preset\",\"Insta-clone\")\r\n        data.append(\"cloud_name\",\"harshal\")\r\n        fetch(\"https://api.cloudinary.com/v1_1/harshal/image/upload\",{\r\n            method:\"post\",\r\n            body:data\r\n        })\r\n        .then(res=>res.json())\r\n        .then(data=>{\r\n            setUrl(data.url)\r\n        })\r\n        .catch(err=>{\r\n            console.log(err)\r\n        })\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className=\"card input-field\"\r\n            style={{maxWidth:\"500px\",\r\n                    textAlign:\"center\",\r\n                    padding:\"20px\",\r\n                    margin:\"30px auto\"\r\n                  }}>\r\n            <input type=\"text\" placeholder=\"title\" value={title} onChange={(e)=>setTitle(e.target.value)} />\r\n            <input type=\"text\" placeholder=\"body\" value={body} onChange={(e)=>setBody(e.target.value)} />\r\n            <div className=\"file-field input-field\">\r\n                <div className=\"btn #64b5f6 blue darken-1\">\r\n                    <span>Upload Image</span>\r\n                    <input type=\"file\" onChange={(e)=>setImage(e.target.files[0])} />\r\n                </div>\r\n                <div className=\"file-path-wrapper\">\r\n                    <input className=\"file-path validate\" type=\"text\" />\r\n                </div>\r\n            </div>\r\n            <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\" onClick={()=>postDetails()}>\r\n                 Submit Post\r\n                 </button>\r\n        </div>\r\n    )\r\n}\r\nexport default CreatePost","D:\\MERN-STACK insta\\client\\src\\reducers\\userReducer.js",["74","75"],"export const initialState= null\r\n\r\nexport const reducer = (state,action)=>{\r\n    if(action.type==\"USER\"){\r\n        return action.payload\r\n    }\r\n    if(action.type==\"CLEAR\"){\r\n        return null\r\n    }\r\n    return state\r\n}",["76","77"],"D:\\MERN-STACK insta\\client\\src\\components\\UserProfile.js",["78","79","80","81"],"import React,{useEffect,useState,useContext} from 'react'\r\nimport {userContext} from '../App'\r\nimport {useParams} from 'react-router-dom'\r\n\r\n//profile page of other user\r\nconst UserProfile = () => {\r\n    const [userProfile,setProfile]=useState(null)\r\n    const {state,dispatch}=useContext(userContext)\r\n    const {userid}=useParams()\r\n    console.log(userid)                              \r\n    useEffect(() => {\r\n        fetch(`http://localhost:5000/user/${userid}`,{\r\n            headers:{\r\n                \"Authorization\":\"Bearer \"+localStorage.getItem(\"jwt\")\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(result => {\r\n           //console.log(result)               // result contanis posts[array]and user object(_id,name,emil)\r\n            setProfile(result)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n        {userProfile? \r\n            <div style={{maxWidth:\"550px\",margin:\"0px auto\"}}>\r\n            <div style={{\r\n                display: \"flex\",\r\n                justifyContent: \"space-around\",\r\n                margin: \"18px 0px\",\r\n                borderBottom:\"1px solid grey\"\r\n            }}>\r\n                <div>\r\n                <img style={{ width: \"160px\", height: \"160px\", borderRadius: \"80px\" }}\r\n                    src={userProfile.user.pic}/>\r\n                </div>\r\n                <div>\r\n                     <h4>{userProfile.user.name}</h4> \r\n                     <h5>{userProfile.user.email}</h5> \r\n                    <div style={{\r\n                        display:\"flex\",\r\n                        justifyContent:\"space-between\",\r\n                        width:\"108%\"\r\n                        }}>\r\n                        <h6>{userProfile.posts.length} post</h6>\r\n                        <h6>40 followers</h6>\r\n                        <h6>40 followings</h6>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"gallery\">\r\n            {\r\n                userProfile.posts.map(item=>{\r\n                    return(\r\n                        <img className=\"item\" src={item.photo} alt={item.title}/>\r\n                    )\r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n        :<h2>loading...!</h2>\r\n        }\r\n        </>\r\n    )\r\n}\r\nexport default UserProfile\r\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":17,"column":9,"nodeType":"88","messageId":"89","endLine":17,"endColumn":14},{"ruleId":"90","severity":1,"message":"91","line":26,"column":5,"nodeType":"92","endLine":26,"endColumn":7,"suggestions":"93"},{"ruleId":"82","replacedBy":"94"},{"ruleId":"84","replacedBy":"95"},{"ruleId":"86","severity":1,"message":"87","line":10,"column":11,"nodeType":"88","messageId":"89","endLine":10,"endColumn":16},{"ruleId":"86","severity":1,"message":"96","line":7,"column":17,"nodeType":"88","messageId":"89","endLine":7,"endColumn":25},{"ruleId":"97","severity":1,"message":"98","line":36,"column":34,"nodeType":"99","messageId":"100","endLine":36,"endColumn":36},{"ruleId":"97","severity":1,"message":"98","line":62,"column":34,"nodeType":"99","messageId":"100","endLine":62,"endColumn":36},{"ruleId":"97","severity":1,"message":"98","line":89,"column":30,"nodeType":"99","messageId":"100","endLine":89,"endColumn":32},{"ruleId":"97","severity":1,"message":"98","line":140,"column":49,"nodeType":"99","messageId":"100","endLine":140,"endColumn":51},{"ruleId":"101","severity":1,"message":"102","line":145,"column":33,"nodeType":"103","endLine":145,"endColumn":57},{"ruleId":"86","severity":1,"message":"96","line":6,"column":18,"nodeType":"88","messageId":"89","endLine":6,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":30,"column":17,"nodeType":"103","endLine":31,"endColumn":55},{"ruleId":"90","severity":1,"message":"104","line":17,"column":11,"nodeType":"92","endLine":17,"endColumn":16,"suggestions":"105"},{"ruleId":"90","severity":1,"message":"106","line":40,"column":7,"nodeType":"92","endLine":40,"endColumn":12,"suggestions":"107"},{"ruleId":"97","severity":1,"message":"98","line":4,"column":19,"nodeType":"99","messageId":"100","endLine":4,"endColumn":21},{"ruleId":"97","severity":1,"message":"98","line":7,"column":19,"nodeType":"99","messageId":"100","endLine":7,"endColumn":21},{"ruleId":"82","replacedBy":"108"},{"ruleId":"84","replacedBy":"109"},{"ruleId":"86","severity":1,"message":"87","line":8,"column":12,"nodeType":"88","messageId":"89","endLine":8,"endColumn":17},{"ruleId":"86","severity":1,"message":"96","line":8,"column":18,"nodeType":"88","messageId":"89","endLine":8,"endColumn":26},{"ruleId":"90","severity":1,"message":"110","line":22,"column":8,"nodeType":"92","endLine":22,"endColumn":10,"suggestions":"111"},{"ruleId":"101","severity":1,"message":"102","line":35,"column":17,"nodeType":"103","endLine":36,"endColumn":49},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["114"],["112"],["113"],"'dispatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'uploadFields'. Either include it or remove the dependency array.",["115"],"React Hook useEffect has missing dependencies: 'body', 'history', and 'title'. Either include them or remove the dependency array.",["116"],["112"],["113"],"React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["117"],"no-global-assign","no-unsafe-negation",{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [dispatch, history]",{"range":"126","text":"127"},"Update the dependencies array to be: [uploadFields, url]",{"range":"128","text":"129"},"Update the dependencies array to be: [body, history, title, url]",{"range":"130","text":"131"},"Update the dependencies array to be: [userid]",{"range":"132","text":"133"},[1058,1060],"[dispatch, history]",[582,587],"[uploadFields, url]",[1281,1286],"[body, history, title, url]",[812,814],"[userid]"]